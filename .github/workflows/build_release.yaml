name: 'Build DrLogger Release'

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: 'Release branch'
        required: true
        type: choice
        options:
          - 'release/v1.0'
          - 'release/v1.1'
      merge_branch:
        description: 'Merge from branch'
        required: true
        default: 'master'
        type: string
      is_a_prerelease:
        description: 'Is this a prerelease?'
        required: true
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: windows-latest
    continue-on-error: false
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Checkout specific branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.release_branch }}
          fetch-depth: 0
      
      - name: Merge from another branch (locally)
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin ${{ github.event.inputs.merge_branch }}
          git checkout ${{ github.event.inputs.release_branch }}
          git merge origin/${{ github.event.inputs.merge_branch }} --no-ff --commit -m "Merge branch '${{ github.event.inputs.merge_branch }}' into '${{ github.event.inputs.release_branch }}'"
      
      - name: Run Tests
        run: |
          make run-test
      
      - name: Build Application
        run: |
          make build
      
      - name: Get latest patch version
        id: get_patch
        shell: bash
        run: |
          prefix="${{ github.event.inputs.release_branch }}"
          tags=$(git tag -l "${prefix}.*" | sort -V)
          if [[ -z "$tags" ]]; then
            next_patch=0
          else
            latest_tag=$(echo "$tags" | tail -n1)
            patch=${latest_tag##*.}
            next_patch=$((patch + 1))
          fi
          new_tag="${prefix}.${next_patch}"
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV

      - name: Tag Build
        run: |
          git tag "${{ env.NEW_TAG }}"
      
      - name: Push merged changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git push origin ${{ github.event.inputs.release_branch }}
          git push origin "${{ env.NEW_TAG }}"
      
      - name: Publish Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ env.NEW_TAG }}"
          release_name: Release "${{ env.NEW_TAG }}"
          draft: false
          prerelease: ${{ github.event.inputs.is_a_prerelease }}
      
      - name: Upload Application
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/DrLogger.exe
          asset_name: DrLogger.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      