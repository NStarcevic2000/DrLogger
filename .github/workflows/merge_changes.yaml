name: 'Merge Feature Branch'

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: 'Select branch to merge changes into'
        required: true
        type: choice
        options:
          - 'master'
          - 'release/v1.1'
          - 'release/v1.0'
      feature_branch:
        description: 'Feature branch'
        required: true
        type: string
      is_a_prerelease:
        description: 'Is this a prerelease?'
        required: true
        type: boolean
        default: false

jobs:
  build:
    runs-on: windows-latest
    continue-on-error: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.feature_branch }}
          fetch-depth: 0
          fetch-tags: true

      - name: Check if there is anything to merge
        id: check_merge
        shell: bash
        run: |
          git fetch origin ${{ github.event.inputs.release_branch }}:${{ github.event.inputs.release_branch }} || true
          if git rev-parse --verify ${{ github.event.inputs.release_branch }} >/dev/null 2>&1; then
            echo "Release branch exists."
          else
            echo "Release branch does not exist. Exiting."
            exit 1
          fi
          new_commits=$(git rev-list --count ${{ github.event.inputs.feature_branch }} ^${{ github.event.inputs.release_branch }})
          if [ "$new_commits" -eq 0 ]; then
            echo "No new commits to merge from ${{ github.event.inputs.feature_branch }} to ${{ github.event.inputs.release_branch }}. Exiting."
            exit 1
          else
            echo "There are ${new_commits} commits to merge."
          fi

      - name: Create list of commits to cherrypick (based from master)
        id: list_commits
        shell: bash
        run: |
          git fetch origin ${{ github.event.inputs.feature_branch }}:${{ github.event.inputs.feature_branch }} || true
          git log master..${{ github.event.inputs.feature_branch }} --pretty=format:"%H" > commits_to_cherrypick.txt
          echo "commits_to_cherrypick=$(cat commits_to_cherrypick.txt)" >> $GITHUB_OUTPUT

      - name: Create integration branch for selected release branch
        id: create_integration_branch
        shell: bash
        run: |
          integration_branch="integration/${{ github.event.inputs.release_branch }}/${{ github.event.inputs.feature_branch }}"
          git checkout -b "$integration_branch"
          echo "INTEGRATION_BRANCH=$integration_branch" >> $GITHUB_ENV
      
      - name: Cherry-pick commits into integration branch
        id: cherry_pick_commits
        shell: bash
        run: |
          integration_branch=${{ env.INTEGRATION_BRANCH }}
          git checkout $integration_branch
          if [ ! -s commits_to_cherrypick.txt ]; then
            echo "No commits to cherry-pick."
            exit 0
          fi
          while IFS= read -r commit; do
            git cherry-pick "$commit" || {
              echo "Conflict occurred while cherry-picking commit $commit into $integration_branch. Aborting cherry-pick."
              git cherry-pick --abort
              exit 1
            }
          done < commits_to_cherrypick.txt
          echo "Cherry-picked commits into $integration_branch"
      
      - name: Push integration branch
        shell: bash
        run: |
          git push origin "${{ env.INTEGRATION_BRANCH }}"

      - name: Create squashed pull request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: ${{ github.event.inputs.release_branch }}
          head: ${{ env.INTEGRATION_BRANCH }}
          title: "Squash cherrypick changes from ${{ github.event.inputs.feature_branch }} into ${{ github.event.inputs.release_branch }}"
          body: |
            This pull request was automatically created to squash cherrypick changes from `${{ github.event.inputs.feature_branch }}` into `${{ github.event.inputs.release_branch }}`.

            Please review the changes and resolve any conflicts if necessary.
          draft: false
